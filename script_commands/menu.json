{
	"menu": {
		"params": {
			"option_text": {
				"type": "string",
				"default": "*?*",
				"doc": []
			},
			"target_label": {
				"type": "number",
				"default": "*?*",
				"doc": []
			}
		},
		"signatures": [
			[
				"option_text",
				"target_label"
			],
			[
				"option_text",
				"target_label",
				"option_text",
				"target_label"
			]
		],
		"doc": [
			"This command will create a selectable menu for the invoking character.\n",
			"Only one menu can be on screen at the same time.\n",
			"\n",
			"Depending on what the player picks from the menu, the script execution\n",
			"will continue from the corresponding label. It's string-label pairs, not\n",
			"label-string.\n",
			"\n",
			"This command is deprecated and it should not be used in new scripts, as it\n",
			"is likely to be removed at a later time. Please consider using select() or\n",
			"prompt() instead.\n",
			"\n",
			"Options can be grouped together, separated by the character ':'.\n",
			"\n",
			"\tmenu(\"A:B\", L_Wrong, \"C\", L_Right);\n",
			"\n",
			"It also sets a special temporary character variable @menu, which contains\n",
			"the number of option the player picked. Numbering of options starts at 1.\n",
			"This number is consistent with empty options and grouped options.\n",
			"\n",
			"\tmenu(\"A::B\", L_Wrong, \"\", L_Impossible, \"C\", L_Right);\n",
			"\tL_Wrong:\n",
			"\t// If they click \"A\" or \"B\" they will end up here\n",
			"\t// @menu == 1 if \"A\"\n",
			"\t// @menu == 2 will never happen because the option is empty\n",
			"\t// @menu == 3 if \"B\"\n",
			"\tL_Impossible:\n",
			"\t// Empty options are not displayed and therefore can't be selected\n",
			"\t// this label will never be reached from the menu command\n",
			"\tL_Right:\n",
			"\t// If they click \"C\" they will end up here\n",
			"\t// @menu == 5\n",
			"\n",
			"If a label is '-', the script execution will continue right after the menu\n",
			"command if that option is selected, this can be used to save you time, and\n",
			"optimize big scripts.\n",
			"\n",
			"\tmenu(\"A::B:\", -, \"C\", L_Right);\n",
			"\t// If they click \"A\" or \"B\" they will end up here\n",
			"\t// @menu == 1 if \"A\"\n",
			"\t// @menu == 3 if \"B\"\n",
			"\tL_Right:\n",
			"\t// If they click \"C\" they will end up here\n",
			"\t// @menu == 5\n",
			"\n",
			"Both these examples will perform the exact same task.\n",
			"\n",
			"If you give an empty string as a menu item, the item will not display.\n",
			"This can effectively be used to script dynamic menus by using empty string\n",
			"for entries that should be unavailable at that time.\n",
			"\n",
			"You can do it by using arrays, but watch carefully - this trick isn't high\n",
			"wizardry, but minor magic at least. You can't expect to easily duplicate\n",
			"it until you understand how it works.\n",
			"\n",
			"Create a temporary array of strings to contain your menu items, and\n",
			"populate it with the strings that should go into the menu at this\n",
			"execution, making sure not to leave any gaps. Normally, you do it with a\n",
			"loop and an extra counter, like this:\n",
			"\n",
			"\tsetarray(.@possiblemenuitems$[0], <list of potential menu items>);\n",
			"\t.@j = 0; // That's the menu lines counter.\n",
			"\n",
			"\t// We loop through the list of possible menu items.\n",
			"\t// .@i is our loop counter.\n",
			"\tfor (.@i = 0; .@i < getarraysize(.@possiblemenuitems$); ++.@i) {\n",
			"\t\t// That 'condition' is whatever condition that determines whether\n",
			"\t\t// a menu item number .@i actually goes into the menu or not.\n",
			"\n",
			"\t\tif (<condition>) {\n",
			"\t\t\t// We record the option into the list of options actually\n",
			"\t\t\t// available.\n",
			"\t\t\t.@menulist$[.@j] = .@possiblemenuitems$[.@i];\n",
			"\n",
			"\t\t\t// We just copied the string, we do need it's number for later\n",
			"\t\t\t// though, so we record it as well.\n",
			"\t\t\t.@menureference[.@j] = .@i;\n",
			"\n",
			"\t\t\t// Since we've just added a menu item into the list, we\n",
			"\t\t\t// increment the menu lines counter.\n",
			"\t\t\t++.@j;\n",
			"\t\t}\n",
			"\n",
			"\t\t// We go on to the next possible menu item.\n",
			"\t}\n",
			"\n",
			"This will create you an array .@menulist$ which contains the text of all\n",
			"items that should actually go into the menu based on your condition, and\n",
			"an array .@menureference, which contains their numbers in the list of\n",
			"possible menu items. Remember, arrays start with 0. There's less of them\n",
			"than the possible menu items you've defined, but the menu() command can\n",
			"handle the empty lines - only if they are last in the list, and if it's\n",
			"made this way, they are. Now comes a dirty trick:\n",
			"\n",
			"\t// X is whatever the most menu items you expect to handle.\n",
			"\tmenu(.@menulist$[0], -, .@menulist$[1], -, ..., .@menulist$[<X>], -);\n",
			"\n",
			"This calls up a menu of all your items. Since you didn't copy some of the\n",
			"possible menu items into the list, it's end is empty and so no menu items\n",
			"will show up past the end. But this menu() call doesn't jump anywhere, it\n",
			"just continues execution right after the menu() command. (And it's a good\n",
			"thing it doesn't, cause you can only explicitly define labels to jump to,\n",
			"and how do you know which ones to define if you don't know beforehand\n",
			"which options will end up where in your menu?)\n",
			"But how do you figure out which option the user picked? Enter the @menu.\n",
			"\n",
			"@menu contains the number of option that the user selected from the list,\n",
			"starting with 1 for the first option. You know now which option the user\n",
			"picked and which number in your real list of possible menu items it\n",
			"translated to:\n",
			"\n",
			"    mes(\"You selected \"+.@possiblemenuitems$[.@menureference[@menu-1]]+\"!\");\n",
			"\n",
			"@menu is the number of option the user picked.\n",
			"@menu-1 is the array index for the list of actually used menu items that\n",
			"we made.\n",
			".@menureference[@menu-1] is the number of the item in the array of possible\n",
			"menu items that we've saved just for this purpose.\n",
			"\n",
			"And .@possiblemenuitems$[.@menureference[@menu-1]] is the string that we\n",
			"used to display the menu line the user picked. (Yes, it's a handful, but\n",
			"it works.)\n",
			"\n",
			"You can set up a bunch of 'if (.@menureference[@menu-1]==X) goto(Y)'\n",
			"statements to route your execution based on the line selected and still\n",
			"generate a different menu every time, which is handy when you want to, for\n",
			"example, make users select items in any specific order before proceeding,\n",
			"or make a randomly shuffled menu.\n",
			"\n",
			"Kafra code bundled with the standard distribution uses a similar\n",
			"array-based menu technique for teleport lists, but it's much simpler and\n",
			"doesn't use @menu, probably since that wasn't documented anywhere.\n",
			"\n",
			"See also 'select', which is probably better in this particular case.\n",
			"Instead of menu(), you could use select() like this:\n",
			"\n",
			"    .@dummy = select(.@menulist$[0], .@menulist$[1], ..., .@menulist$[<X>]);\n",
			"\n",
			"For the purposes of the technique described above these two statements are\n",
			"perfectly equivalent.\n"
		],
		"return": "unknown",
		"deprecated": true
	}
}