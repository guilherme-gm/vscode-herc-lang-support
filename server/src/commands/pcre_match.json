{"pcre_match":{"params":[{"string":"string","regex":"string"}],"paramDoc":{"string":"Missing Documentation","regex":"Missing Documentation"},"doc":["The string <string> will be searched for a match to the regular expression","<regex>, and the number of matches will be returned.","An alternative way to invoke this command is to use the operators '~=' or '~!'.","The operator '~=' is exactly the same as pcre_match, while the operator '~!'","will return true if no matches were found, or false if at least a match was found.","if (pcre_match(\"string\", \"regex\"))","mes(\"There was a match.\");","if (\"string\" ~= \"regex\")","mes(\"There was a match.\");","if (\"string\" ~! \"regex\")","mes(\"There were no matches.\");","You can find more usage examples in the test script npc/custom/test.txt.","Using regular expressions is high wizardry. But with this high wizardry","comes unparalleled power of text manipulation. For an explanation of what","a regular expression pattern is, see a few web pages:","http://www.regular-expressions.info/","http://www.weitz.de/regex-coach/","Additionally, the following temporary variables will be filled (unless the","command is invoked as '~!'):","- $@regexmatchcount: The number of matches detected, including any","parenthesized capture-groups.","- $@regexmatch$[0]: The part of <string> That matched the full <regex> pattern.","- $@regexmatch$[1 .. $@regexmatchcount]: The parts of <string> that matched","each of the parenthesized capture-groups in <pattern>.","A capture group is a part of a regex enclosed in (parentheses) in order to","store in a variable the part of the expression that was matched by that part of","the regex. For more details, see the links above, as this is not intended to be","a regex tutorial."]}}